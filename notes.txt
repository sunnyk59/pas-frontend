# Dockerfile for React Production Build
# Use Node.js as the base image for building the app
FROM node:16-alpine as build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to install dependencies
COPY ./package*.json ./
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the React app for production
RUN npm run build

# Use NGINX to serve the built app
FROM nginx:alpine

# Copy the build output to the NGINX directory
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80 to the outside world (NGINX default)
EXPOSE 80

# Start NGINX server
CMD ["nginx", "-g", "daemon off;"]



# Dockerfile for Development Local Build
# Use Node.js as the base image for building
FROM node:16-alpine as build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (if available) to the working directory
COPY ./package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose port 3000 (default) to the outside world
EXPOSE 3000

# Command to run the application
CMD ["npm", "start"]







//  deploy.yaml k8s configuration

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.27.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks --region ap-southeast-2 update-kubeconfig --name pas-eks-cluster

    - name: Deploy to EKS
      run: |
        # Apply Kubernetes deployment for the frontend
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml # If you're using ingress to access the app

    - name: Verify Deployment
      run: |
        kubectl get pods -o wide  # Check if the pods are running correctly